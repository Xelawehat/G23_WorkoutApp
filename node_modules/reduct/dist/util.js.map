{"version":3,"file":"util.js","sourceRoot":"","sources":["../util.ts"],"names":[],"mappings":";;AAAA,SAAS,iBAAiB,CAAK,GAAW;IACxC,MAAM,GAAG,GAAQ,EAAE,CAAA;IACnB,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE;QACjB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;KACZ;IACD,OAAO,GAAG,CAAA;AACZ,CAAC;AAcC,8CAAiB;AAZnB,SAAS,OAAO,CAAE,SAAc;IAC9B,OAAO,OAAO,SAAS,KAAK,UAAU,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAA;AACrF,CAAC;AAWC,0BAAO;AATT,SAAS,sBAAsB,CAAE,GAAsB;IACrD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,GAAG,CAAA;KACX;IACD,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAA;AAC5E,CAAC;AAKC,wDAAsB","sourcesContent":["function convertSetToArray<T> (set: Set<T>): T[] {\n  const arr: T[] = []\n  for (let v of set) {\n    arr.push(v)\n  }\n  return arr\n}\n\nfunction isClass (candidate: any): candidate is new () => Object {\n  return typeof candidate === 'function' && /^\\s*class\\s+/.test(candidate.toString())\n}\n\nfunction printPrettyConstructor (key: string | Function) {\n  if (typeof key === 'string') {\n    return key\n  }\n  return key.name || (isClass(key) ? '[anonymous class]' : '[anonymous fn]')\n}\n\nexport {\n  convertSetToArray,\n  isClass,\n  printPrettyConstructor\n}\n"]}