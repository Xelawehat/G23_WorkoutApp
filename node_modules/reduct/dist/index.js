"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utility = require("./util");
const createContainer = function (parent) {
    let parentInjector;
    if (parent instanceof Map) {
        parentInjector = key => parent.get(key);
    }
    else if (typeof parent === 'object') {
        parentInjector = key => parent[key.name];
    }
    else if (typeof parent === 'function') {
        parentInjector = parent;
    }
    else if (typeof parent === 'undefined') {
        parentInjector = () => undefined;
    }
    else {
        throw new TypeError('Parent injector must be a Map, object or function');
    }
    const cache = new Map();
    const mapping = new Map();
    let stack = new Set();
    let queue = [];
    const construct = (Constructor) => {
        const OverrideConstructor = mapping.get(Constructor);
        return new (OverrideConstructor || Constructor)(reduct);
    };
    const reduct = (Constructor) => {
        if (typeof Constructor !== 'function') {
            throw new TypeError('Dependencies must be constructors/factories, but got: ' + typeof Constructor);
        }
        if (stack.has(Constructor)) {
            const stackArray = utility.convertSetToArray(stack);
            stackArray.push(Constructor);
            const prettyStack = stackArray.map(utility.printPrettyConstructor).join(' => ');
            throw new Error('Circular dependency detected: ' + prettyStack);
        }
        const cachedInstance = cache.get(Constructor);
        if (cachedInstance) {
            return cachedInstance;
        }
        stack.add(Constructor);
        const instance = parentInjector(Constructor) ||
            construct(Constructor);
        stack.delete(Constructor);
        cache.set(Constructor, instance);
        if (queue.length) {
            stack.add(utility.printPrettyConstructor(Constructor) + ' (post)');
            const lastQueue = queue;
            queue = [];
            lastQueue.forEach((fn) => fn());
        }
        return instance;
    };
    reduct.setOverride = (Constructor, OverrideConstructor) => {
        mapping.set(Constructor, OverrideConstructor);
    };
    reduct.later = (fn) => queue.push(fn);
    return reduct;
};
createContainer.default = createContainer;
createContainer.util = utility;
exports.default = createContainer;
module.exports = createContainer;
//# sourceMappingURL=index.js.map